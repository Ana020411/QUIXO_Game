import copy
from queue import PriorityQueue

class QuixoReferee:
    def __init__(self, symbol):
       self.board = [[0] * 5 for _ in range(5)]
       self.symbol = symbol
       self.movements = []

   # Tomar en cuenta que la ficha no se puede poner en el mismo lugar de donde se sacó
   # Si para completar la alineación de 5 también se alineó 5 del oponente, pierdes

    def check_win(self, board, symbol):
       # Se checan filas y columnas
       for i in range(5):
           if all(board[i][j] == symbol for j in range(5)) or all(board[j][i] == symbol for j in range(5)):
               return True
       # Se checan diagonales
       if all(board[i][i] == symbol for i in range(5)) or all(board[i][4 - i] == symbol for i in range(5)):
           return True

       return False

    def play_turn(self, board):
       new_board, path = self.a_star(Heuristic.heuristic0)
       if new_board is None:
           return self.board  # No se encontró una solución
       else:
           self.board = new_board
           return self.board

    def reset(self, symbol):
       self.symbol = symbol
       self.board = [[0] * 5 for _ in range(5)]
       self.movements = []

    "---------------------------------MOVIMIENTOS----------------------------------------"
    def move_right(self, board, row, col):
       if board[row][col] == self.symbol or board[row][col] == 0:
           while col < 4:
               board[row][col] = board[row][col + 1]
               col += 1
           board[row][4] = self.symbol
       return board

    def move_left(self, board, row, col):
       if board[row][col] == self.symbol or board[row][col] == 0:
           while col > 0:
               board[row][col] = board[row][col - 1]
               col -= 1
           board[row][0] = self.symbol
       return board

    def move_up(self, board, row, col):
       if board[row][col] == self.symbol or board[row][col] == 0:
           while row > 0:
               board[row][col] = board[row - 1][col]
               row -= 1
           board[0][col] = self.symbol
       return board

    def move_down(self, board, row, col):
       if board[row][col] == self.symbol or board[row][col] == 0:
           while row < 4:
               board[row][col] = board[row + 1][col]
               row += 1
           board[4][col] = self.symbol
       return board

    def get_movements(self, row, col):
        movements = []
        if row == 0 and col == 0:
            movements.extend(["down", "right"])
        elif row == 0 and col == 4:
            movements.extend(["down", "left"])
        elif row == 4 and col == 0:
            movements.extend(["up", "right"])
        elif row == 4 and col == 4:
            movements.extend(["up", "left"])
        elif 1 <= row <= 3 and col == 0:
            movements.extend(["down", "up", "right"])
        elif 1 <= row <= 3 and col == 4:
            movements.extend(["down", "up", "left"])
        elif row == 0 and 1 <= col <= 3:
            movements.extend(["down", "right", "left"])
        elif row == 4 and 1 <= col <= 3:
            movements.extend(["up", "right", "left"])
        else:
            return "Movimiento inválido. Solo se permiten movimientos en la periferia del tablero."
        return movements

    def apply_move(self, move):
        row, col, movement = move
        new_board = copy.deepcopy(self.board)

        if movement == "down":
            new_board = self.move_down(new_board, row, col)
        elif movement == "up":
            new_board = self.move_up(new_board, row, col)
        elif movement == "right":
            new_board = self.move_right(new_board, row, col)
        elif movement == "left":
            new_board = self.move_left(new_board, row, col)

        return new_board

    def a_star(self, heuristic):
            visited = []
            pq = PriorityQueue()
            source = NodeAStar(self.board, path=[])
            pq.put((0, source))

            while not pq.empty():
                _, current_node = pq.get()
                
                if current_node not in visited:
                    current_board = current_node.state

                    if self.check_win(current_board, self.symbol):
                        return current_board, current_node.path

                    visited.append(current_node)

                    for row in range(5):
                        for col in range(5):
                            if current_board[row][col] == self.symbol or current_board[row][col] == 0:
                                movements = self.get_movements(row, col)
                                for move in movements:
                                    new_board = self.apply_move((row, col, move))
                                    new_node = NodeAStar(new_board, current_node.path + [(row, col, move)])
                                    new_node.distance = current_node.distance + 1
                                    new_node.calculate_heuristic(heuristic)
                                    pq.put((new_node.distance + new_node.heuristic_value, new_node))
                else:
                    continue

            return None, []

    def print_board(self):
       for row in self.board:
           print(' | '.join(str(cell) for cell in row))
           print('------------------')

class Node:
    def __init__(self, state, path=None):
       self.state = state
       self.path = path if path is not None else []
       self.heuristic = None

    def calculate_heuristic(self, heuristic):
       self.heuristic_value = heuristic(self)

    def __eq__(self, other):
       if not isinstance(other, Node):
           return False
       return self.state == other.state

    def __lt__(self, other):
       if not isinstance(other, Node):
           return False
       return self.heuristic_value < other.heuristic_value

    def __gt__(self, other):
       if not isinstance(other, Node):
           return False
       return self.heuristic_value > other.heuristic_value

class NodeAStar(Node):
   def __init__(self, state, path=None):
       super().__init__(state, path=path)
       self.distance = 0

   def __lt__(self, other):
       if not isinstance(other, NodeAStar):
           return False
       return (self.distance + self.heuristic_value) < (other.distance + other.heuristic_value)

   def __gt__(self, other):
       if not isinstance(other, NodeAStar):
           return False
       return (self.distance + self.heuristic_value) > (other.distance + other.heuristic_value)

class Heuristic:
   @staticmethod
   def heuristic0(node):
       return 0

print(" 0 : Cara neutra / 1: Marca de círculo / -1: Marca de cruz\n")

quixo = QuixoReferee(1)
